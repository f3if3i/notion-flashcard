/* eslint-disable indent */
import Head from "next/head"
import styles from "../styles/Database.module.css"
import Card from "../components/Card"
import { useState } from "react"
import { queryDatabases, retrieveDatabase, retrieveUser } from "../lib/notion_ssr"
import Layout from "../components/Layout/Layout"
import type { ReactElement } from "react"
import type { NextPageWithLayout } from "./_app"
import {
    DatabaseObjectResponse
} from "@notionhq/client/build/src/api-endpoints"


export async function getServerSideProps() {
    const id = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID
    const resultsContents = await queryDatabases(id!)
    const resultDB = await retrieveDatabase(id!) as DatabaseObjectResponse
    const userId = resultDB.created_by.id
    const resultsUser = await retrieveUser(userId)
    return {
        props: {
            contents: resultsContents || null,
            user: resultsUser || null
        }
    }
}

interface Props {
    contents: any
    user: any
}

const Database: NextPageWithLayout<Props> = ({ contents, user }) => {
    const [contentIndex, setContentIndex] = useState<number>(0)
    console.log("contents", contents)
    console.log("user", user)

    const displayContents = contents.results.map((content: { properties: { Name: any; Description: any } }) =>
    (
        {
            title: content.properties.Name.title[0].plain_text,
            description: content.properties.Description.rich_text[0].plain_text
        }
    ))

    const contentsLength = displayContents.length

    const [title, setTitle] = useState(displayContents[contentIndex].title)
    const [description, setDescription] = useState(displayContents[contentIndex].description)
    const [ifFlipped, setIfFlipped] = useState(false)

    const flipCard = () => {
        setIfFlipped((prev) => !prev)
    }

    const setNewCard = (index: number) => {
        setTitle(displayContents[index].title)
        setDescription(displayContents[index].description)
    }

    const indexIncrement = () =>
        setContentIndex((prev) => prev + 1)


    const handleClick = () => {
        flipCard()
    }

    const handleNextButton = () => {
        if (contentIndex < contentsLength - 1) {
            indexIncrement()
            console.log(contentIndex)
            setIfFlipped(false)
            setNewCard(contentIndex + 1)
        } else {
            setTitle("Congrats!!")
        }
    }


    return (
        <div className={styles.container}>
            <Head>
                <title>Notion Flashcard</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <h1 className={styles.title}>
                    Notion Flashcard
                </h1>

                <p className={styles.description}>
                    Hi! {user.name}, this is your progress {contentIndex + 1} / {contentsLength}
                </p>

                <div className={styles.grid}>
                    <Card
                        title={title}
                        description={description}
                        ifFlipped={ifFlipped}
                        onClick={handleClick}
                    />
                </div>
                <button className={styles.button}
                    onClick={handleNextButton}>Next</button>
            </main>

        </div>
    )
}

Database.getLayout = function getLayout(page: ReactElement) {
    return (
        <Layout>
            {page}
        </Layout>
    )
}

export default Database
